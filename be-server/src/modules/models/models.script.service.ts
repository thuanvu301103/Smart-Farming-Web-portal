import {
    Injectable, Inject, forwardRef,
    NotFoundException, BadRequestException,
    InternalServerErrorException,
    HttpException, HttpStatus,
} from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Models } from '../../schemas/models.schema';
import { ModelScript } from '../../schemas/models.scripts.schema';
import { FilesService } from "../files/files.service";
import { ConfigService } from '@nestjs/config';
import axios from 'axios';

@Injectable()
export class ModelScriptsService {

    constructor(
        @InjectModel(Models.name) private modelModel: Model<Models>,
        @InjectModel(ModelScript.name) private modelScriptModel: Model<ModelScript>,
        @Inject(FilesService) private readonly filesService: FilesService,
        private readonly configService: ConfigService,
    ) {}

    // Upload Model Script
    async uploadModelScript(scriptFiles, version, user_id, model_id, model_version) {
        const newModelScript = new this.modelScriptModel({
            version: version,
            model_id: new Types.ObjectId(model_id),
            model_version: model_version
        })
        const savedModelScript = await newModelScript.save();
        for (const file of scriptFiles) {
            file.originalname = `version${version}.json`
        }
        if (savedModelScript && savedModelScript._id) {
            await this.filesService.uploadFilesToFTP(scriptFiles, `/${user_id}/model/${model_id}/script`)
        } else {
            throw new InternalServerErrorException('Error while saving Model Script');
        }
    }

    // get all Model Script generated by a Model
    async getAllModelScripts(model_id) {
        const scripts = await this.modelScriptModel.find({ model_id: new Types.ObjectId(model_id) }).lean().exec();
        //console.log(scripts);
        return scripts;
    }

    // get a Model Script
    async getModelScript(user_id, model_id, script_version) {
        //console.log(`${ user_id }%2Fmodel%2F${ model_id }%2Fscript%2Fversion${ script_version }.json`);
        return await this.filesService.getFileContent(`${user_id}/model/${model_id}/script/version${script_version}.json`);
    }
    
}
